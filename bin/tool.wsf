<?xml version="1.0" ?>
<package>

<job id="ListJob">
<runtime>
<description>
List job of tool.wsf.
These jobs are defined.

    ListJob
    ADSIObjectDump
    ListWmiObject
    WatchEventLog
</description>
<example>
EXAMPLE: cscript tool.wsf
</example>
</runtime>
<script language="VBScript"><![CDATA[

Option Explicit

WScript.Arguments.ShowUsage

]]></script>
</job>

<job id="ADSIObjectDump">
<script language="VBScript" src="../lib/stdlib.vbs" />
<script language="VBScript"><![CDATA[

Option Explicit

If WScript.Arguments.Unnamed.Count <> 1 Then
  WScript.Arguments.ShowUsage
  WScript.Quit 255
End If

Dim optName
Dim showProperties: showProperties = False
Dim skipUndefinedProperties: skipUndefinedProperties = True

For Each optName In WScript.Arguments.Named
  Select Case UCase(optName)
    Case "SHOWPROPERTIES":
      showProperties = GetNamedArgumentBool(optName, WScript.Arguments.Named, Empty)
    Case "SKIPUNDEFINEDPROPERTIES":
      skipUndefinedProperties = GetNamedArgumentBool(optName, WScript.Arguments.Named, Empty)
    Case Else:
      Err.Raise RuntimeError, WScript.ScriptName & ":ADSIObjectDump", "unknnown option: " & optName
  End Select
Next

Dim adsPath
adsPath = WScript.Arguments.Unnamed(0)

Dim root
Set root = GetObject(adsPath)

Dim visitor
Set visitor = ADSI_CreateVisitor
ADSI_AttachVisitorFuncProc visitor, "GetIndent", GetRef("ADSI_GetIndent"), 1
ADSI_AttachVisitorSubProc visitor, "ADSI_VisitObject", GetRef("ADSI_VisitObject"), 2
ADSI_AttachVisitorSubProc visitor, "ADSI_VisitContainer", GetRef("ADSI_VisitContainer"), 2
ADSI_AttachVisitorSubProc visitor, "ADSI_Visit_Group", GetRef("ADSI_VisitGroup"), 2
ADSI_AttachVisitorSubProc visitor, "ADSI_Visit_group", GetRef("ADSI_VisitGroup"), 2
ADSI_AttachVisitorSubProc visitor, "ADSI_Visit_Schema", GetRef("ADSI_VisitSchema"), 2
ADSI_AttachVisitorSubProc visitor, "ADSI_Visit_Class", GetRef("ADSI_VisitClass"), 2
ADSI_AttachVisitorSubProc visitor, "ADSI_Visit_Syntax", GetRef("ADSI_VisitSyntax"), 2
ADSI_AttachVisitorSubProc visitor, "ADSI_Visit_Property", GetRef("ADSI_VisitProperty"), 2

Function ADSI_GetIndent(visitor)
  ADSI_GetIndent = String(visitor("ADSI_VisitDepth") * 2, " ")
End Function

Sub ADSI_VisitObject(visitor, adsObject)
  Dim indent
  indent = visitor("GetIndent")()
  WScript.StdOut.WriteLine indent & "* [" & adsObject.Class & "] " & adsObject.Name
  If showProperties Then
    Dim schema
    Set schema = visitor("GetSchema")(adsObject)
    PrintObjectProperties Array("ADsPath", "GUID", "Parent", "Schema"), adsObject, indent & "  ", "(ObjectProperty) "
    PrintObjectProperties Array("Container", "Containment"), schema, indent & "  ", "(SchemaProperty) "
    PrintDirectoryProperties schema.MandatoryProperties, adsObject, indent & "  ", "(MandatoryProperty) "
    PrintDirectoryProperties schema.OptionalProperties, adsObject, indent & "  ", "(OptionalProperty) "
  End If
End Sub

Sub ADSI_VisitContainer(visitor, adsContainer)
  ADSI_VisitObject visitor, adsContainer
  ADSI_VisitContainerDefault visitor, adsContainer
End Sub

Sub ADSI_VisitGroup(visitor, adsObject)
  ADSI_VisitObject visitor, adsObject
  WScript.StdOut.WriteLine _
    visitor("GetIndent")() & "  Members: " & _
    ShowValue(Map(adsObject.Members, ValueObjectProperties(Array("Name", "Class"))))
End Sub

Sub ADSI_VisitSchema(visitor, adsObject)
  Dim indent
  indent = visitor("GetIndent")
  WScript.StdOut.WriteLine indent & "* [" & adsObject.Class & "] " & adsObject.Name
  If showProperties Then
    PrintObjectProperties Array("ADsPath", "GUID", "Parent"), adsObject, indent & "  ", "(ObjectProperty) "
  End If
  ADSI_VisitContainerDefault visitor, adsObject
End Sub

Sub ADSI_VisitClass(visitor, adsObject)
  Dim indent
  indent = visitor("GetIndent")
  WScript.StdOut.WriteLine indent & "* [" & adsObject.Class & "] " & adsObject.Name
  If showProperties Then
    PrintObjectProperties Array("ADsPath", "GUID", "Parent"), adsObject, indent & "  ", "(ObjectProperty) "
    PrintObjectProperties Array("Abstract", "MandatoryProperties", "OptionalProperties", _
                                "Container", "Containment"), adsObject, indent & "  ", "(ClassProperty) "
  End If
End Sub

Sub ADSI_VisitSyntax(visitor, adsObject)
  Dim indent
  indent = visitor("GetIndent")
  WScript.StdOut.WriteLine indent & "* [" & adsObject.Class & "] " & adsObject.Name
  If showProperties Then
    PrintObjectProperties Array("ADsPath", "GUID", "Parent"), adsObject, indent & "  ", "(ObjectProperty) "
  End If
End Sub

Sub ADSI_VisitProperty(visitor, adsObject)
  Dim indent
  indent = visitor("GetIndent")
  WScript.StdOut.WriteLine indent & "* [" & adsObject.Class & "] " & adsObject.Name
  If showProperties Then
    PrintObjectProperties Array("ADsPath", "GUID", "Parent"), adsObject, indent & "  ", "(ObjectProperty) "
    PrintObjectProperties Array("Syntax", "MaxRange", "MinRange"), adsObject, indent & "  ", "(PropertyProperty) "
  End If
End Sub

Sub PrintObjectProperties(propNameList, adsObject, indent, prefix)
  Dim propName
  For Each propName In propNameList
    WScript.StdOut.WriteLine indent & prefix & propName & ": " & ShowValue(GetObjectProperty(adsObject, propName))
  Next
End Sub

Sub PrintDirectoryProperties(propNameList, adsObject, indent, prefix)
  Dim propName, propValue
  For Each propName In propNameList
    Err.Clear
    On Error Resume Next

    propValue = ShowValue(adsObject.Get(propName))
    If Err.Number <> 0 Then
      Err.Clear
      propValue = Empty
    End If

    If IsEmpty(propValue) Then
      If Not skipUndefinedProperties Then
        WScript.StdOut.WriteLine indent & prefix & propName & ": -"
      End If
    Else
      WScript.StdOut.WriteLine indent & prefix & propName & ": " & propValue
    End If
  Next
End Sub

ADSI_Visit visitor, root

]]></script>
</job>

<job id="ListWmiObject">
<runtime>
<description>List WMI object.</description>
<named name="ns" type="string" required="false"
       helpstring="target namespace." />
<named name="security" type="boolean" required="false"
       helpstring="enable Security SID." />
<unnamed name="class" required="true" many="false"
         helpstring="class of WMI object." />
</runtime>
<script language="VBScript" src="../lib/stdlib.vbs" />
<script language="VBScript"><![CDATA[

Option Explicit

Dim optName
Dim nameSpace: nameSpace = "\root\cimv2"
Dim isSecurity: isSecurity = False

For Each optName In WScript.Arguments.Named
  Select Case UCase(optName)
    Case "NS":
      nameSpace = WScript.Arguments.Named(optName)
    Case "SECURITY":
      isSecurity = GetNamedArgumentBool(optName, WScript.Arguments.Named, False)
    Case Else:
      Err.Raise RuntimeError, WScript.ScriptName & ":ListWmiObject", "Unknown option: " & optName
  End Select
Next

Dim klassName
If WScript.Arguments.Unnamed.Count <> 1 Then
  WScript.Arguments.ShowUsage
  WScript.Quit 255
End If
klassName = WScript.Arguments.Unnamed(0)

Dim computerName
computerName = "."

Dim path
path = "winmgmts:"
If isSecurity Then
  path = path & "{(Security)}!"
End If
path = path & "\\" & computerName & nameSpace
WScript.StdOut.WriteLine "access to " & path

Dim services, klass
Set services = GetObject(path)
Set klass = services.Get(klassName)

Sub PrintSeparator(message)
  WScript.StdOut.WriteLine "---------------- " & message & " ----------------"
End Sub

Dim GetWbemPropOptInfo
Set GetWbemPropOptInfo = New WbemPropertyOptionalInformationGetter
Set GetWbemPropOptInfo.Class = klass

Dim count, obj, prop
count = 0

For Each obj In klass.Instances_
  count = count + 1
  PrintSeparator Now & ": " & klassName & ": " & count
  For Each prop In obj.Properties_
    WScript.StdOut.WriteLine prop.Name & ": " & _
      ShowValue(prop.Value) & _
      GetWbemPropOptInfo(prop.Name)
  Next
Next
PrintSeparator Now & ": End of" & klassName

]]></script>
</job>

<job id="WatchEventLog">
<script language="VBScript" src="../lib/stdlib.vbs" />
<script language="VBScript"><![CDATA[

Option Explicit

WScript.StdOut.WriteLine now

Dim computerName
computerName = "."

Dim services
Set services = GetObject("winmgmts:{(Security)}//" & computerName & "/root/cimv2")

Dim GetWbemPropOptInfo
Set GetWbemPropOptInfo = New WbemPropertyOptionalInformationGetter
Set GetWbemPropOptInfo.Class = services.Get("Win32_NTLogEvent")

Dim wql
wql = "SELECT * FROM __InstanceCreationEvent WITHIN 10 WHERE TargetInstance ISA 'Win32_NTLogEvent'"

WScript.StdOut.WriteLine "WQL: " & wql

Dim events, count, ev, prop
Set events = services.ExecNotificationQuery(wql)
count = 0

WScript.StdOut.WriteLine "start watching event Log..."
Do
  Set ev = events.NextEvent
  count = count + 1
  WScript.StdOut.WriteLine "---------------- " & Now & ": log " & count & " ----------------"
  For Each prop In ev.TargetInstance.Properties_
    WScript.StdOut.WriteLine prop.Name & ": " & ShowValue(prop.Value) & GetWbemPropOptInfo(prop.Name)
  Next
  WScript.StdOut.WriteBlankLines 1
Loop

]]></script>
</job>

</package>

<!-- Local Variables: -->
<!-- mode: Visual-Basic -->
<!-- indent-tabs-mode: nil -->
<!-- End: -->

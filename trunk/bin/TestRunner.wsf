<?xml version="1.0" ?>
<job id="ConsoleTestRunner">
<runtime>
<description>Console test runner of VBScript Unit Test.</description>
<named name="stdin" type="boolean" required="false"
       helpstring="read VBScript test case filename(s) from standard input." />
<unnamed name="filename" many="true" required="false"
         helpstring="VBScript test case." />
<example>
EXAMPLE

  (1) Run test case from command line arguments.

        cscript TestRunner.wsf test_foo.vbs test_bar.vbs

  (2) Run test case from standard input.

        dir /b test_*.vbs | cscript TestRunner.wsf /stdin+
</example>
</runtime>
<script language="VBScript" src="../lib/stdlib.vbs" />
<script language="VBScript" src="../lib/unittest.vbs" />
<script language="VBScript"><![CDATA[

Option Explicit

Dim key
Dim optStdIn: optStdIn = False

For Each key In WScript.Arguments.Named
  Select Case UCase(key)
    Case "STDIN":
      If IsEmpty(WScript.Arguments.Named(key)) Or WScript.Arguments.Named(key) Then
        optStdIn = True
      Else
        optStdIn = False
      End If
    Case Else:
      Err.Raise RuntimeError, "TestRunner.wsf", "Unknown command line option: " & key
  End Select
Next

Dim fileList
Set fileList = New ListBuffer

If optStdIn Then
  Do Until WScript.StdIn.AtEndOfStream
    fileList.Add WScript.StdIn.ReadLine
  Loop
Else
  If WScript.Arguments.Unnamed.Count = 0 Then
    WScript.Arguments.ShowUsage
    WScript.Quit 255
  End If
End If
fileList.Append WScript.Arguments.Unnamed

Dim loader
Set loader = New UnitTest_TestCaseLoader

Dim path
For Each path In fileList.Items
  WScript.StdOut.WriteLine "load " & path
  loader.ImportTestCase path
Next

Dim testProcList, testCase
Set testProcList = New ListBuffer
For Each testCase In loader.Items
  testProcList.Append testCase.Items
Next

Dim errorList
Set errorList = New ListBuffer

Dim startTime
startTime = Timer

Dim testProc, testStat
For Each testProc In testProcList.Items
  testStat = "."
  On Error Resume Next

  testProc.SetUp
  If Err.Number <> 0 Then
    testStat = "E"
    errorList.Add Array(testProc, "SetUp Error: " & Err.Number & " " & Err.Description & " (" & Err.Source & ")")
  End If

  If Err.Number = 0 Then
    testProc.Execute
    If Err.Number <> 0 Then
      If UnitTest_IsAssertFail(Err) Then
        testStat = "F"
        errorList.Add Array(testProc, "Assertion Failed: " & Err.Description)
      Else
        testStat = "E"
        errorList.Add Array(testProc, "Test Error: " & Err.Number & " " & Err.Description & " (" & Err.Source & ")")
      End If
    End If
  End If
  Err.Clear

  testProc.TearDown
  If Err.Number <> 0 Then
    testStat = "E"
    errorList.Add Array(testProc, "TearDown Error: " & Err.Number & " " & Err.Description & " (" & Err.Source & ")")
  End If

  On Error GoTo 0
  WScript.StdOut.Write testStat
Next
WScript.StdOut.WriteBlankLines 1

WScript.StdOut.Write "result "
If errorList.Count = 0 Then
  WScript.StdOut.WriteLine "OK"
Else
  WScript.StdOut.WriteLine "NG"
End If

Dim endTime, elapsed
endTime = Timer
elapsed = endTime - startTime
WScript.StdOut.WriteLine "elapsed " & elapsed & "s"

Dim count, errPair
count = 0

If errorList.Count > 0 Then
  WScript.StdOut.WriteBlankLines 1
End If
For Each errPair In errorList.Items
  count = count + 1
  WScript.StdOut.WriteLine "(" & count & ") " & errPair(0).ModuleName & ": " & errPair(0).Name
  WScript.StdOut.WriteLine "  " & errPair(1)
Next

If errorList.Count > 0 Then
  WScript.Quit 1
Else
  WScript.Quit 0
End If

]]></script>
</job>

<!-- Local Variables: -->
<!-- mode: Visual-Basic -->
<!-- indent-tabs-mode: nil -->
<!-- End: -->

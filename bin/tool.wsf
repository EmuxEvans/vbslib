<?xml version="1.0" ?>
<package>

<job id="ListJob">
<runtime>
<description>
List job of tool.wsf.
These jobs are defined.

    ListJob
    ListWmiObject
</description>
<example>
EXAMPLE: cscript tool.wsf
</example>
</runtime>
<script language="VBScript"><![CDATA[

Option Explicit

WScript.Arguments.ShowUsage

]]></script>
</job>

<job id="ListWmiObject">
<runtime>
<description>List WMI object.</description>
<named name="ns" type="string" required="false"
       helpstring="target namespace." />
<named name="security" type="boolean" required="false"
       helpstring="enable Security SID." />
<unnamed name="class" required="true" many="false"
         helpstring="class of WMI object." />
</runtime>
<script language="VBScript" src="../lib/stdlib.vbs" />
<script language="VBScript"><![CDATA[

Option Explicit

Dim optName
Dim nameSpace: nameSpace = "\root\cimv2"
Dim isSecurity: isSecurity = False
For Each optName In WScript.Arguments.Named
  Select Case UCase(optName)
    Case "NS":
      nameSpace = WScript.Arguments.Named(optName)
    Case "SECURITY":
      isSecurity = GetNamedArgumentBool(optName, WScript.Arguments.Named, False)
    Case Else:
      Err.Raise RuntimeError, WScript.ScriptName & ":ListWmiObject", "Unknown option: " & optName
  End Select
Next

Dim klassName
If WScript.Arguments.Unnamed.Count <> 1 Then
  WScript.Arguments.ShowUsage
  WScript.Quit 255
End If
klassName = WScript.Arguments.Unnamed(0)

Dim computerName
computerName = "."

Dim path
path = "winmgmts:"
If isSecurity Then
  path = path & "{(Security)}!"
End If
path = path & "\\" & computerName & nameSpace
WScript.StdOut.WriteLine "access to " & path

Dim services, klass
Set services = GetObject(path)
Set klass = services.Get(klassName)

Sub PrintSeparator(message)
  WScript.StdOut.WriteLine "---------------- " & message & " ----------------"
End Sub

Function GetQualifier(prop, name)
  On Error Resume Next
  Set GetQualifier = prop.Qualifiers_(name)
  If Err.Number <> 0 Then
    Set GetQualifier = Nothing
  End If
End Function

Class OptionalPropertyInfoGetter
  Private ivar_class
  Private ivar_cache

  Private Sub Class_Initialize
    Set ivar_cache = CreateObject("Scripting.Dictionary")
  End Sub

  Public Property Set [Class](value)
    Set ivar_class = value
  End Property

  Public Default Function GetInfo(propName)
    If Not ivar_cache.Exists(propName) Then
      Dim prop
      Set prop = ivar_class.Properties_(propName)

      Dim units
      Set units = GetQualifier(prop, "Units")

      Dim valueMap
      Set valueMap = GetQualifier(prop, "ValueMap")

      Dim info
      info = ""
      If Not units Is Nothing Then
        info = info & " (" & units.Value & ")"
      End If
      If Not valueMap Is Nothing Then
        info = info & " [" & Join(valueMap.Value, "|") & "]"
      End If

      ivar_cache.Add propName, info
    End If

    GetInfo = ivar_cache(propName)
  End Function
End Class

Dim OptionalPropertyInfo
Set OptionalPropertyInfo = New OptionalPropertyInfoGetter
Set OptionalPropertyInfo.Class = klass

Dim count, obj, prop
count = 0

For Each obj In klass.Instances_
  count = count + 1
  PrintSeparator Now & ": " & klassName & ": " & count
  For Each prop In obj.Properties_
    WScript.StdOut.WriteLine prop.Name & ": " & _
      ShowValue(prop.Value) & _
      OptionalPropertyInfo(prop.Name)
  Next
Next
PrintSeparator Now & ": End of" & klassName

]]></script>
</job>

</package>

<!-- Local Variables: -->
<!-- mode: Visual-Basic -->
<!-- indent-tabs-mode: nil -->
<!-- End: -->
